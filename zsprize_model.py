# -*- coding: utf-8 -*-
"""zsprize_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OzCelDhEk9V1zZX8EH5ngY3WWha0-gRg
"""

# K-Means Clustering


# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn import metrics
from sklearn.metrics import pairwise_distances
import numpy as np
from sklearn.cluster import KMeans
from sklearn.metrics import davies_bouldin_score

# Importing the dataset
dataset = pd.read_csv('Wellbeing_and_lifestyle_data.csv')
X = dataset.iloc[:, [0,1,2,3,4,5,6,7]].values

# Using the elbow method to find the optimal number of clusters
from sklearn.cluster import KMeans
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters = i, init = 'k-means++', random_state = 1)
    kmeans.fit(X)
    wcss.append(kmeans.inertia_)
plt.plot(range(1, 11), wcss)
plt.title('The Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

# Training the K-Means model on the dataset
kmeans = KMeans(n_clusters = 4, init = 'k-means++', random_state = 1)
y_kmeans = kmeans.fit_predict(X)

# Visualising the clusters
plt.scatter(X[y_kmeans == 0, 0], X[y_kmeans == 0, 1], s = 100, c = 'red', label = 'Cluster 1')
plt.scatter(X[y_kmeans == 1, 0], X[y_kmeans == 1, 1], s = 100, c = 'blue', label = 'Cluster 2')
plt.scatter(X[y_kmeans == 2, 0], X[y_kmeans == 2, 1], s = 100, c = 'green', label = 'Cluster 3')
plt.scatter(X[y_kmeans == 3, 0], X[y_kmeans == 3, 1], s = 100, c = 'cyan', label = 'Cluster 4')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 300, c = 'yellow', label = 'Centroids')
plt.title('Clusters of people having same type of diseases')
plt.xlabel('X')
plt.ylabel('Y')
plt.legend()
plt.show()
print(kmeans.cluster_centers_[:,:])
print("Cluster 1 : Hypertension , Cluster 2 : Obesity , Cluster 3 : Healthy , Cluster 4 : Stroke ")

#Cluster Quality
labels = kmeans.labels_
print("Silhouette Coefficient : ")
print(metrics.silhouette_score(X, labels, metric='euclidean'))
print("Calinski-Harabasz Index : ")
print(metrics.calinski_harabasz_score(X, labels))
print("Davies-Bouldin Index : ")
print(davies_bouldin_score(X, labels))

#Predicting Results
print("Enter Your Name ")
name = input()
print("Enter Your Age ")
age = int(input())
print("Enter Your Height in meters ")
height = float(input())
print("Enter Your Weight in Kg ")
weight = float(input())
print("Enter Your Gender M/F ")
gender = input()
print("Number of Steps per Day ")
steps=int(input())
print("Sleep hours")
sleep=int(input())
print("Meditation Time per Day (1-10 mins) ")
meditation=int(input())
calories=0.04*steps
bmi=weight/(height*height)
if age>=18 and age<=25:
    age1=1
    age2=0
elif age>=26 and age<=35:
    age1=0
    age2=1
else:
    age1=0
    age2=0
if gender=='M':
    gen=1
else:
    gen=0
person=[bmi,steps,sleep,meditation,age1,age2,gen,calories]
print("Person Profile")
print(person)
c1=(bmi-kmeans.cluster_centers_[0,0])*(bmi-kmeans.cluster_centers_[0,0])+(steps-kmeans.cluster_centers_[0,1])*(steps-kmeans.cluster_centers_[0,1])+(sleep-kmeans.cluster_centers_[0,2])*(sleep-kmeans.cluster_centers_[0,2])+(meditation-kmeans.cluster_centers_[0,3])*(meditation-kmeans.cluster_centers_[0,3])+(age1-kmeans.cluster_centers_[0,4])*(age1-kmeans.cluster_centers_[0,4])+(age2-kmeans.cluster_centers_[0,5])*(age2-kmeans.cluster_centers_[0,5])+(gen-kmeans.cluster_centers_[0,6])*(gen-kmeans.cluster_centers_[0,6])+(calories-kmeans.cluster_centers_[0,7])*(calories-kmeans.cluster_centers_[0,7])
c2=(bmi-kmeans.cluster_centers_[1,0])*(bmi-kmeans.cluster_centers_[1,0])+(steps-kmeans.cluster_centers_[1,1])*(steps-kmeans.cluster_centers_[1,1])+(sleep-kmeans.cluster_centers_[1,2])*(sleep-kmeans.cluster_centers_[1,2])+(meditation-kmeans.cluster_centers_[1,3])*(meditation-kmeans.cluster_centers_[1,3])+(age1-kmeans.cluster_centers_[1,4])*(age1-kmeans.cluster_centers_[1,4])+(age2-kmeans.cluster_centers_[1,5])*(age2-kmeans.cluster_centers_[1,5])+(gen-kmeans.cluster_centers_[1,6])*(gen-kmeans.cluster_centers_[1,6])+(calories-kmeans.cluster_centers_[1,7])*(calories-kmeans.cluster_centers_[1,7])
c3=(bmi-kmeans.cluster_centers_[2,0])*(bmi-kmeans.cluster_centers_[2,0])+(steps-kmeans.cluster_centers_[2,1])*(steps-kmeans.cluster_centers_[2,1])+(sleep-kmeans.cluster_centers_[2,2])*(sleep-kmeans.cluster_centers_[2,2])+(meditation-kmeans.cluster_centers_[2,3])*(meditation-kmeans.cluster_centers_[2,3])+(age1-kmeans.cluster_centers_[2,4])*(age1-kmeans.cluster_centers_[2,4])+(age2-kmeans.cluster_centers_[2,5])*(age2-kmeans.cluster_centers_[2,5])+(gen-kmeans.cluster_centers_[2,6])*(gen-kmeans.cluster_centers_[2,6])+(calories-kmeans.cluster_centers_[2,7])*(calories-kmeans.cluster_centers_[2,7])
c4=(bmi-kmeans.cluster_centers_[3,0])*(bmi-kmeans.cluster_centers_[3,0])+(steps-kmeans.cluster_centers_[3,1])*(steps-kmeans.cluster_centers_[3,1])+(sleep-kmeans.cluster_centers_[3,2])*(sleep-kmeans.cluster_centers_[3,2])+(meditation-kmeans.cluster_centers_[3,3])*(meditation-kmeans.cluster_centers_[3,3])+(age1-kmeans.cluster_centers_[3,4])*(age1-kmeans.cluster_centers_[3,4])+(age2-kmeans.cluster_centers_[3,5])*(age2-kmeans.cluster_centers_[3,5])+(gen-kmeans.cluster_centers_[3,6])*(gen-kmeans.cluster_centers_[3,6])+(calories-kmeans.cluster_centers_[3,7])*(calories-kmeans.cluster_centers_[3,7])
print("Distance Vector")
print(c1,c2,c3,c4,c5)
if min(c1,c2,c3,c4,c5)==c1:
    print("Person is more prone to Hypertension")
elif min(c1,c2,c3,c4,c5)==c2:
    print("Person is more prone to Stroke(Hemorrhagic)")
elif min(c1,c2,c3,c4,c5)==c3:
    print("Person is Healthy")
else:
    print("Person is Obese")
print("Score of the Person :")
print("Scoring on a scale of 0-10")
s1=10-(c1/max(c1,c2,c3,c4))*10
s2=10-(c2/max(c1,c2,c3,c4))*10
s3=10-(c3/max(c1,c2,c3,c4))*10
s4=10-(c4/max(c1,c2,c3,c4))*10
print("Hypertension : " )
print(s1)
print("Stroke : " )
print(s2)
print("Healthy : " )
print(s3)
print("Obese : " )
print(s4)
score=[s1,s2,s3,s4]
print(score)









